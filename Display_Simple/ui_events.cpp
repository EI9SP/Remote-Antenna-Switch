// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.3.4
// LVGL version: 8.3.6
// Project name: SquareLine_Project

#include "ui.h"
#include "SD.h"
#include "time.h"
#include "WiFi.h"


#define ntpServerAsia "asia.pool.ntp.org";
#define ntpServerEurope "europe.pool.ntp.org";
#define ntpServerNAmerica "north-america.pool.ntp.org";
#define ntpServerSAmerica "south-america.pool.ntp.org";
#define ntpServerOceania "oceania.pool.ntp.org";
#define ntpServerWW "pool.ntp.org";

const long gmtOffset_sec = 0;
const int daylightOffset_sec = 3600;
unsigned long timeout = 0;
String ntpServer = ntpServerWW;

extern HardwareSerial SerialPort2;
extern String switchTemp;
extern String nameSSID;
extern String password;
extern String currentAnt;
extern bool showTime;
///////////

//Switch reated
/*
"----Command list:---"
"a?------------Get active antenna number"
"a0------------All off"
"a1------------Antenna 1"
"a2------------Antenna 2"
"a3------------Antenna 3"
"a4------------Antenna 4"
"all-----------All ON!"

"address-(0-254)------Set new rs485 address"
"da?-----------Get Default antenna port"
"da (number)---Set Default antenna port"
"t?-------------Get Temperature"
"rs_term_on----BUS Termination Enabled"
"rs_term_off---BUS Termination Disabled"
"reboot -------System Restart"
"load----------Firmware update"
"?-------------Get command list"

Special commands
"255-<spacja> -?" - --------get command list
255 -<spacja> -reboot"--- reboot wszystkich switchy
255-<spacja> - a0" wyłącz wszytskie antenny na wszytkich switchach
*/

int ActiveAntennaPort;
int ActiveSwitchAddress = 1;
String endLine = "\r";
String getActiveAntena = String(ActiveSwitchAddress) + " a?" + endLine;
String getActiveAntenaPort = String(ActiveSwitchAddress) + " da?" + endLine;
String setActiveAntenaPort = String(ActiveSwitchAddress) + " da " + ActiveAntennaPort + endLine;

String switchAllAnntenasOFF = String(ActiveSwitchAddress) + " a0" + endLine;
String switchAllAnntenasON = String(ActiveSwitchAddress) + " all" + endLine;
String switchOnAntena1 = String(ActiveSwitchAddress) + " a1" + endLine;
String switchOnAntena2 = String(ActiveSwitchAddress) + " a2" + endLine;
String switchOnAntena3 = String(ActiveSwitchAddress) + " a3" + endLine;
String switchOnAntena4 = String(ActiveSwitchAddress) + " a4" + endLine;

String getSwitchTemp = String(ActiveSwitchAddress) + " t?" + endLine;
String rebootSwitch = String(ActiveSwitchAddress) + " reboot" + endLine;
String enableTermination = String(ActiveSwitchAddress) + " rs_term_on" + endLine;
String disableTermination = String(ActiveSwitchAddress) + " rs_term_off" + endLine;

String rebootAllSwitches = "255 reboot" + endLine;
String switchAllSwitchesAnntenasOFF = "255 a0" + endLine;


void SendToSwitch(String command)  // Send Command to switch
{
  Serial.println("Command  sent :>" + command + "<:");
  for (int i = 0; i < command.length(); i++) {
    SerialPort2.write(command[i]);
  }
}

void CollectDataFromSwitch()  // Get data from switch
{
  String data_recievied;
  String netStatus;
  bool switchConnected = false;  //var used to determine errors with cnnectivity
  String antPort = "";

  SendToSwitch(getActiveAntena);
  if (SerialPort2.available()) {  //we have some kind of cmmunication ;)
    data_recievied = SerialPort2.readStringUntil('\n');
    if ((data_recievied.substring(8, 9) == "1") or (data_recievied.substring(8, 9) == "2") or (data_recievied.substring(8, 9) == "3") or (data_recievied.substring(8, 9) == "4") or (data_recievied.substring(8, 9) == "0")) {
      antPort = data_recievied.substring(8, 9);  // data_recievied;
      switchConnected = true;
      data_recievied = "";
    } else {  // So there is connection but the data seems to be wrong
      switchConnected = true;
      Serial.println("Problem :: " + data_recievied);
    }
  } else {  //yeah - loks we have connection problem
    Serial.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!    Problem NO DATA RECIEVED !!!!!!!!!!!!!!!!!!!!!!!!! ");
  }

  // read temp only if we knoow that connection is poessible to etablish
  if (switchConnected) {
    SendToSwitch(getSwitchTemp);
    if (SerialPort2.available()) {
      data_recievied = SerialPort2.readStringUntil('\n');
      if ((data_recievied.length() > 5) and (data_recievied.length() < 10)) {
        switchTemp = "";
        switchTemp = data_recievied.substring(5, data_recievied.length());
        data_recievied = "";
        Serial.println(".... Temp: " + switchTemp);
      } else {  // So there is connection but the data seems to be wrong
        switchTemp = "Err ";
      }
    } else {
      Serial.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!    Problem NO DATA RECIEVED !!!!!!!!!!!!!!!!!!!!!!!!! ");
      switchTemp = "Err";
      lv_label_set_text(ui_txtStatus, switchTemp.c_str());
    }
  } else {
    //set the waarnig as we know there is no comunnication between display and switch
  }


  //lets check if the sky is not failing over on our hads ;)
  if ((WiFi.status() == WL_CONNECTED) && (!switchConnected)) {
    String message = "Wifi Connected. Poblem with establishing connection to switch - unknown antena port...";
    lv_label_set_text(ui_txtStatus, message.c_str());
    netStatus = "Connected. IP: " + WiFi.localIP().toString();
    lv_label_set_text(ui_xtxWifi, netStatus.c_str());
  } else if ((WiFi.status() != WL_CONNECTED) && (!switchConnected)) {
    String message = "Wifi Disconnected. Poblem with establishing connection to switch - unknown antena port...";
    lv_label_set_text(ui_txtStatus, message.c_str());
    lv_label_set_text(ui_xtxWifi, "WiFI discnnected");
  }

  //update status ot values
  if (antPort != "") {  //we know we get the port
    currentAnt = antPort;
    data_recievied = "";
    lv_label_set_text(ui_txtStatus, "");
  }
  if (switchTemp == "Err") {
    lv_label_set_text(ui_txtStatus, "Problem with getting temperature value.");
    lv_label_set_text(ui_txtTemp, switchTemp.c_str());
  } else if (switchTemp != "") {
    lv_label_set_text(ui_txtTemp, switchTemp.c_str());
    lv_label_set_text(ui_txtStatus, "");
  }
  if (!switchConnected) {
    lv_label_set_text(ui_txtStatus, "Wifi Connected. Poblem with establishing connection to switch - unknown antena port...");
    _ui_state_modify(ui_btnAntena1, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
    _ui_state_modify(ui_btnAntena2, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
    _ui_state_modify(ui_btnAntena3, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
    _ui_state_modify(ui_btnAntena4, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
    _ui_state_modify(ui_btnAntena5, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
  } else { // used to change stte(color) of the button if connection restored. Can be done object orientated way but had no time to change code
    if (currentAnt == "0") {
      _ui_state_modify(ui_btnAntena1, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena2, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena3, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena4, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena5, LV_STATE_CHECKED, _UI_MODIFY_STATE_ADD);

    } else if (currentAnt == "1") {
      _ui_state_modify(ui_btnAntena1, LV_STATE_CHECKED, _UI_MODIFY_STATE_ADD);
      _ui_state_modify(ui_btnAntena2, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena3, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena4, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena5, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);

    } else if (currentAnt == "2") {
      _ui_state_modify(ui_btnAntena1, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena2, LV_STATE_CHECKED, _UI_MODIFY_STATE_ADD);
      _ui_state_modify(ui_btnAntena3, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena4, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena5, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
    } else if (currentAnt == "3") {
      _ui_state_modify(ui_btnAntena1, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena2, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena3, LV_STATE_CHECKED, _UI_MODIFY_STATE_ADD);
      _ui_state_modify(ui_btnAntena4, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena5, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
    } else if (currentAnt == "4") {
      _ui_state_modify(ui_btnAntena1, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena2, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena3, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena4, LV_STATE_CHECKED, _UI_MODIFY_STATE_ADD);
      _ui_state_modify(ui_btnAntena5, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
    } else {
      _ui_state_modify(ui_btnAntena1, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena2, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena3, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena4, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
      _ui_state_modify(ui_btnAntena5, LV_STATE_CHECKED, _UI_MODIFY_STATE_REMOVE);
    }
  }
}


void printLocalTime() {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
    return;
  }
  Serial.println(&timeinfo, "%d-%m-%Y %H:%M");
  char timeStringBuff[50];  //50 chars should be enough
  strftime(timeStringBuff, sizeof(timeStringBuff), "%d-%m-%Y %H:%M", &timeinfo);
  lv_label_set_text(ui_Label8, timeStringBuff);
}



////////


void ConnectWifi(lv_event_t* e) {
  String configFileWifi = "wifi";
  String netStatus;
  //////////
  WiFi.mode(WIFI_STA);
  WiFi.begin(nameSSID, password);
  Serial.print("Connecting to Wifi...");
  Serial.print(nameSSID);
  Serial.print(password);

  timeout = millis();
  while ((WiFi.status() != WL_CONNECTED) && (millis() - timeout < 8000)) {
    Serial.print(".");
    delay(1000);
  }
  Serial.println();

  if (WiFi.status() != WL_CONNECTED && WiFi.status() != WL_NO_SSID_AVAIL) {
    netStatus = "WIFI Disconneted-Invalid password.";
    Serial.println(netStatus);
    lv_label_set_text(ui_xtxWifi, netStatus.c_str());
    showTime = false;

  } else if (WiFi.status() != WL_CONNECTED && WiFi.status() == WL_NO_SSID_AVAIL) {
    netStatus = "Status: Network unavailable";
    Serial.println(netStatus);
    lv_label_set_text(ui_xtxWifi, netStatus.c_str());
    showTime = false;
  } else {
    netStatus = "Connected. IP: " + WiFi.localIP().toString();
    Serial.println(netStatus);
    lv_label_set_text(ui_xtxWifi, netStatus.c_str());
    showTime = true;
  }
  //////////
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer.c_str());
  printLocalTime();
}


void GetDataFromSwitch(lv_event_t* e) {
  CollectDataFromSwitch();
}

void ant1Clicked(lv_event_t* e) {
  // Your code here
  SendToSwitch(switchOnAntena1);
}

void ant2Clicked(lv_event_t* e) {
  // Your code here
  SendToSwitch(switchOnAntena2);
}

void ant0Clicked(lv_event_t* e) {
  // Your code here
  SendToSwitch(switchAllAnntenasOFF);
}

void ant3Clicked(lv_event_t* e) {
  // Your code here
  SendToSwitch(switchOnAntena3);
}

void ant4Clicked(lv_event_t* e) {
  // Your code here
  SendToSwitch(switchOnAntena4);
}
