//#include "AntennaSwitch.h"
#include "FS.h"
#include <SPIFFS.h>
//#include <ArduinoJson.h>
#include <ArduinoJson.h>
/*******************************************************************************
 * Global variables
 ******************************************************************************/
/* You only need to format SPIFFS the first time you run a
   test or else use the SPIFFS plugin to create a partition
   https://github.com/me-no-dev/arduino-esp32fs-plugin */
#define FORMAT_SPIFFS_IF_FAILED true

// define filename to store config file
const String config_filename = "/config.json";

/*
 * Area             HostName
 * Worldwide        pool.ntp.org
 * Asia             asia.pool.ntp.org
 * Europe           europe.pool.ntp.org
 * North America    north-america.pool.ntp.org
 * Oceania          oceania.pool.ntp.org
 * South America    south-america.pool.ntp.org
 */
/*char* ntpServerAsia =     "asia.pool.ntp.org";
char* ntpServerEurope =   "europe.pool.ntp.org";
char* ntpServerNAmerica = "north-america.pool.ntp.org";
char* ntpServerSAmerica = "south-america.pool.ntp.org";
char* ntpServerOceania =  "oceania.pool.ntp.org";
char* ntpServerWW =       "pool.ntp.org";
*/

#define ntpServerAsia "asia.pool.ntp.org";
#define ntpServerEurope "europe.pool.ntp.org";
#define ntpServerNAmerica "north-america.pool.ntp.org";
#define ntpServerSAmerica "south-america.pool.ntp.org";
#define ntpServerOceania "oceania.pool.ntp.org";
#define ntpServerWW "pool.ntp.org";

 char *ntpServer = ntpServerWW;

char clockLabel[] = "";
int switchTemp = 0;

String wifiList = "--------";
String switchesList = "---------";
//AntennaSwitch **ControlleedSwitches;
String SSID;
String SSIDpass;
bool NTP;
String NTPServer = ntpServerWW;

/*******************************************************************************
 * End of Global variables
 *******************************************************************************/
/*******************************************************************************
 * LVGL Benchmark
 * This is a benchmark demo for LVGL - Light and Versatile Graphics Library
 * import from: https://github.com/lvgl/lv_demos.git
 *
 * Dependent libraries:
 * LVGL: https://github.com/lvgl/lvgl.git
 *
 * LVGL Configuration file:
 * Copy your_arduino_path/libraries/lvgl/lv_conf_template.h
 * to your_arduino_path/libraries/lv_conf.h
 *
 * In lv_conf.h around line 15, enable config file:
 * #if 1 // Set it to "1" to enable content
 *
 * Then find and set:
 * #define LV_COLOR_DEPTH     16
 * #define LV_TICK_CUSTOM     1
 *
 * For SPI/parallel 8 display set color swap can be faster, parallel 16/RGB screen don't swap!
 * #define LV_COLOR_16_SWAP   1 // for SPI and parallel 8
 * #define LV_COLOR_16_SWAP   0 // for parallel 16 and RGB
 *
 * Enable LVGL Demo Benchmark:
 * #define LV_USE_DEMO_BENCHMARK 1
 *
 * Enables support for compressed fonts:
 * #define LV_USE_FONT_COMPRESSED 1
 *
 * Customize font size:
 * #define LV_FONT_MONTSERRAT_12 1
 * #define LV_FONT_DEFAULT &lv_font_montserrat_12
 ******************************************************************************/
#include "ui.h"
#include "ui_events.h"
/*******************************************************************************
 * Start of Arduino_GFX setting
 *
 * Arduino_GFX try to find the settings depends on selected board in Arduino IDE
 * Or you can define the display dev kit not in the board list
 * Defalult pin list for non display dev kit:
 * Arduino Nano, Micro and more: CS:  9, DC:  8, RST:  7, BL:  6, SCK: 13, MOSI: 11, MISO: 12
 * ESP32 various dev board     : CS:  5, DC: 27, RST: 33, BL: 22, SCK: 18, MOSI: 23, MISO: nil
 * ESP32-C3 various dev board  : CS:  7, DC:  2, RST:  1, BL:  3, SCK:  4, MOSI:  6, MISO: nil
 * ESP32-S2 various dev board  : CS: 34, DC: 38, RST: 33, BL: 21, SCK: 36, MOSI: 35, MISO: nil
 * ESP32-S3 various dev board  : CS: 40, DC: 41, RST: 42, BL: 48, SCK: 36, MOSI: 35, MISO: nil
 * ESP8266 various dev board   : CS: 15, DC:  4, RST:  2, BL:  5, SCK: 14, MOSI: 13, MISO: 12
 * Raspberry Pi Pico dev board : CS: 17, DC: 27, RST: 26, BL: 28, SCK: 18, MOSI: 19, MISO: 16
 * RTL8720 BW16 old patch core : CS: 18, DC: 17, RST:  2, BL: 23, SCK: 19, MOSI: 21, MISO: 20
 * RTL8720_BW16 Official core  : CS:  9, DC:  8, RST:  6, BL:  3, SCK: 10, MOSI: 12, MISO: 11
 * RTL8722 dev board           : CS: 18, DC: 17, RST: 22, BL: 23, SCK: 13, MOSI: 11, MISO: 12
 * RTL8722_mini dev board      : CS: 12, DC: 14, RST: 15, BL: 13, SCK: 11, MOSI:  9, MISO: 10
 * Seeeduino XIAO dev board    : CS:  3, DC:  2, RST:  1, BL:  0, SCK:  8, MOSI: 10, MISO:  9
 * Teensy 4.1 dev board        : CS: 39, DC: 41, RST: 40, BL: 22, SCK: 13, MOSI: 11, MISO: 12
 ******************************************************************************/

// #include <Arduino_GFX_Library.h>
// #define GFX_BL DF_GFX_BL // default backlight pin, you may replace DF_GFX_BL to actual backlight pin

/* More dev device declaration: https://github.com/moononournation/Arduino_GFX/wiki/Dev-Device-Declaration */
// #if defined(DISPLAY_DEV_KIT)
// Arduino_GFX *gfx = create_default_Arduino_GFX();
// #else /* !defined(DISPLAY_DEV_KIT) */

/* More data bus class: https://github.com/moononournation/Arduino_GFX/wiki/Data-Bus-Class */
// Arduino_DataBus *bus = create_default_Arduino_DataBus();

/* More display class: https://github.com/moononournation/Arduino_GFX/wiki/Display-Class */
// Arduino_GFX *gfx = new Arduino_ILI9341(bus, DF_GFX_RST, 0 /* rotation */, false /* IPS */);

// #endif /* !defined(DISPLAY_DEV_KIT) */

#include <Arduino_GFX_Library.h>
// #define GFX_BL 44
// #define GFX_BL 2
Arduino_ESP32RGBPanel *rgbpanel = new Arduino_ESP32RGBPanel(
    40 /* DE */, 41 /* VSYNC */, 39 /* HSYNC */, 42 /* PCLK */,
    45 /* R0 */, 48 /* R1 */, 47 /* R2 */, 21 /* R3 */, 14 /* R4 */,
    5 /* G0 */, 6 /* G1 */, 7 /* G2 */, 15 /* G3 */, 16 /* G4 */, 4 /* G5 */,
    8 /* B0 */, 3 /* B1 */, 46 /* B2 */, 9 /* B3 */, 1 /* B4 */,
    0 /* hsync_polarity */, 40 /* hsync_front_porch */, 48 /* hsync_pulse_width */, 88 /* hsync_back_porch */,
    0 /* vsync_polarity */, 13 /* vsync_front_porch */, 3 /* vsync_pulse_width */, 32 /* vsync_back_porch */,
    1 /* pclk_active_neg */, 16000000 /* prefer_speed */);

Arduino_RGB_Display *gfx = new Arduino_RGB_Display(
    800 /* width */, 480 /* height */, rgbpanel, 0 /* rotation */, true /* auto_flush */);

/*******************************************************************************
 * End of Arduino_GFX setting
 ******************************************************************************/

#include "WiFi.h"
/*******************************************************************************
 * Please config the touch panel in touch.h
 ******************************************************************************/
#include "touch.h"

/* Change to your screen resolution */
static uint32_t screenWidth;
static uint32_t screenHeight;
static lv_disp_draw_buf_t draw_buf;
static lv_color_t *disp_draw_buf;
static lv_disp_drv_t disp_drv;
static unsigned long last_ms;

/* Display flushing */
void my_disp_flush(lv_disp_drv_t *disp, const lv_area_t *area, lv_color_t *color_p)
{
  uint32_t w = (area->x2 - area->x1 + 1);
  uint32_t h = (area->y2 - area->y1 + 1);

#if (LV_COLOR_16_SWAP != 0)
  gfx->draw16bitBeRGBBitmap(area->x1, area->y1, (uint16_t *)&color_p->full, w, h);
#else
  gfx->draw16bitRGBBitmap(area->x1, area->y1, (uint16_t *)&color_p->full, w, h);
#endif

  lv_disp_flush_ready(disp);
}

void my_touchpad_read(lv_indev_drv_t *indev_driver, lv_indev_data_t *data)
{
  if (touch_has_signal())
  {
    if (touch_touched())
    {
      data->state = LV_INDEV_STATE_PR;

      /*Set the coordinates*/
      data->point.x = touch_last_x;
      data->point.y = touch_last_y;
    }
    else if (touch_released())
    {
      data->state = LV_INDEV_STATE_REL;
    }
  }
  else
  {
    data->state = LV_INDEV_STATE_REL;
  }
}

String readFile(fs::FS &fs, String filename)
{
  Serial.println("readFile -> Reading file: " + filename);

  File file = fs.open(filename);
  if (!file || file.isDirectory())
  {
    Serial.println("readFile -> failed to open file for reading");
    return "";
  }

  String fileText = "";
  while (file.available())
  {
    fileText = file.readString();
  }

  file.close();
  return fileText;
}

void writeFile(fs::FS &fs, String filename, String message)
{
  Serial.println("writeFile -> Writing file: " + filename);

  File file = fs.open(filename, FILE_WRITE);
  if (!file)
  {
    Serial.println("writeFile -> failed to open file for writing");
    return;
  }
  if (file.print(message))
  {
    Serial.println("writeFile -> file written");
  }
  else
  {
    Serial.println("writeFile -> write failed");
  }
  file.close();
}


bool readConfig(String file_name)
{
  String file_content = readFile(SPIFFS, file_name);

  int config_file_size = file_content.length();
  Serial.println("Config file size: " + String(config_file_size));

  if (config_file_size > 1024)
  {
    Serial.println("Config file too large");
    return false;
  }
  StaticJsonDocument<1024> doc;
  auto error = deserializeJson(doc, file_content);
  if (error)
  {
    Serial.println("Error interpreting config file");
    return false;
  }

  //AntennaSwitch _switches = doc["Switches"];
  const String _SSID = doc["SSID"];
  const String _SSID_pass = doc["pass"];
  const bool _NTP = doc["NTP"];
  const String _ntpServer = doc["NTPServer"];

  //ControlleedSwitches = _switches;
  SSID = _SSID;
  SSIDpass = _SSID_pass;
  NTP = _NTP;
  NTPServer = _ntpServer;
  return true;
}

bool saveConfig(String file_name)
{
  StaticJsonDocument<1024> doc;

  // write variables to JSON file
  //doc["Switches"] = AntennaSwitch;
  doc["SSID"] = SSID;
  doc["pass"] = SSIDpass;
  doc["NTP"] = NTP;
  doc["NTPServer"] = NTPServer;

  // write config file
  String tmp = "";
  serializeJson(doc, tmp);
  writeFile(SPIFFS, config_filename, tmp);

  return true;
}

void ActivateAntenna1(lv_event_t *event)
  {
    ActivateAntenna(1);
    }
void ActivateAntenna2(lv_event_t *event)
  {
    ActivateAntenna(2);
    }
void ActivateAntenna3(lv_event_t *event)
  {
    ActivateAntenna(3);
    }
void ActivateAntenna4(lv_event_t *event)
  {
    ActivateAntenna(4);
    }
void ActivateAntenna0(lv_event_t *event)
  {
    ActivateAntenna(0);
    }

    
void ActivateAntenna(int antennaNumber )
{
  Serial.print("Antenna " + String(antennaNumber) + "activated"); 
}

void setup()
{
  Serial.begin(115200);
  // Serial.setDebugOutput(true);
  // while(!Serial);
  Serial.println("Antenna switch by EI9SP");
  // initialize WiFi
  Serial.println("Initializing WiFi");
  WiFi.mode(WIFI_STA);
// disconnect to start again
  WiFi.disconnect();
  delay(100);

  // Mount SPIFFS and read in config file
  if (!SPIFFS.begin(FORMAT_SPIFFS_IF_FAILED))
  {
    Serial.println("setup -> SPIFFS Mount Failed");
  }
  else
  {
    Serial.println("setup -> SPIFFS mounted successfully");
    if (readConfig(config_filename) == false)
    {
      Serial.println("setup -> Could not read Config file -> initializing new file");
      // if not possible -> save new config file
      if (saveConfig(config_filename))
      {
        Serial.println("setup -> Config file saved");
      }
    }
  }
#ifdef GFX_EXTRA_PRE_INIT
  GFX_EXTRA_PRE_INIT();
#endif
Serial.println("setup -> DisplayINIT");
  // Init Display
  if (!gfx->begin())
  {
    Serial.println("gfx->begin() failed!");
  }
  gfx->fillScreen(BLACK);
Serial.println("setup -> GFX Screen set to Black");
#ifdef GFX_BL
  pinMode(GFX_BL, OUTPUT);
  digitalWrite(GFX_BL, HIGH);
#endif

  // Init touch device
  // touch_init(gfx->width(), gfx->height(), gfx->getRotation());
  touch_init(gfx->width(), gfx->height());
  lv_init();

  screenWidth = gfx->width();
  screenHeight = gfx->height();
#ifdef ESP32
  disp_draw_buf = (lv_color_t *)heap_caps_malloc(sizeof(lv_color_t) * screenWidth * 10, MALLOC_CAP_INTERNAL | MALLOC_CAP_8BIT);
#else
  disp_draw_buf = (lv_color_t *)malloc(sizeof(lv_color_t) * screenWidth * 10);
#endif
  if (!disp_draw_buf)
  {
    Serial.println("LVGL disp_draw_buf allocate failed!");
  }
  else
  {
    lv_disp_draw_buf_init(&draw_buf, disp_draw_buf, NULL, screenWidth * 10);

    /* Initialize the display */
    lv_disp_drv_init(&disp_drv);
    /* Change the following line to your display resolution */
    disp_drv.hor_res = screenWidth;
    disp_drv.ver_res = screenHeight;
    disp_drv.flush_cb = my_disp_flush;
    disp_drv.draw_buf = &draw_buf;
    lv_disp_drv_register(&disp_drv);

    /* Initialize the (dummy) input device driver */
    static lv_indev_drv_t indev_drv;
    lv_indev_drv_init(&indev_drv);
    indev_drv.type = LV_INDEV_TYPE_POINTER;
    indev_drv.read_cb = my_touchpad_read;
    lv_indev_drv_register(&indev_drv);

    ui_init();
//MainScreen events
Serial.println("setup -> Initializing GUI events");

    lv_obj_add_event_cb(ui_Panel11, ActivateAntenna1, LV_EVENT_PRESSED, NULL);
    lv_obj_add_event_cb(ui_Panel12, ActivateAntenna2, LV_EVENT_PRESSED, NULL);
    lv_obj_add_event_cb(ui_Panel13, ActivateAntenna3, LV_EVENT_PRESSED, NULL);
    lv_obj_add_event_cb(ui_Panel14, ActivateAntenna4, LV_EVENT_PRESSED, NULL);

    //lv_obj_add_event_cb(ui_LockSwitch, ui_event_LockSwitch, LV_EVENT_VALUE_CHANGED , NULL);
    lv_obj_add_event_cb(ui_DisableAllSwitch, ActivateAntenna0, LV_EVENT_VALUE_CHANGED , NULL);

    //lv_obj_add_event_cb(ui_rollerActiveSwitchHOME, ui_event_rollerActiveSwitchHOME, LV_EVENT_VALUE_CHANGED, NULL);

//SettingsScreen events

Serial.println("setup -> Initializing GUI events ->completed");
    Serial.println("Setup done");
  }
  last_ms = millis();
}

void loop()
{
  lv_timer_handler(); /* let the GUI do its work */
  delay(5);
  
}
